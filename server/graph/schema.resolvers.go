package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"errors"
	"fmt"
	"graphql-example/graph/model"
	"graphql-example/repository"
	"strings"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.CreateTaskPayload, error) {
	panic(fmt.Errorf("not implemented: CreateTask - createTask"))
}

// AddCategory is the resolver for the addCategory field.
func (r *mutationResolver) AddCategory(ctx context.Context, input model.AddCategoryInput) (*model.AddCategoryPayload, error) {
	category, err := r.Repo.AddCategory(ctx, input.Name)
	if err != nil {
		return nil, err
	}
	return &model.AddCategoryPayload{Category: category}, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id string, input model.UpdateCategoryInput) (*model.UpdateCategoryPayload, error) {
	category, err := r.Repo.UpdateCategory(ctx, id, input.Name)
	if err != nil {
		if errors.Is(err, repository.ErrCategoryNotFound) {
			return &model.UpdateCategoryPayload{
				Errors: []model.Error{model.CategoryNotFoundError{Message: fmt.Sprintf("ID:%s not found", id)}},
			}, nil
		}
		return nil, err
	}
	return &model.UpdateCategoryPayload{Category: category}, nil
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (*model.DeleteCategoryPayload, error) {
	err := r.Repo.DeleteCategory(ctx, id)
	if err != nil {
		if errors.Is(err, repository.ErrCategoryNotFound) {
			return &model.DeleteCategoryPayload{
				Errors: []model.Error{model.CategoryNotFoundError{Message: fmt.Sprintf("ID:%s not found", id)}},
			}, nil
		}
		return nil, err
	}
	return &model.DeleteCategoryPayload{ID: id}, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: Tasks - tasks"))
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.Repo.GetAllCategory(ctx)
	if err != nil {
		return nil, err
	}
	return categories, nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (model.Node, error) {
	parts := strings.Split(id, "_")

	// 先頭の要素がv1部分、2番目の要素がCategoryになる
	_, nType := parts[0], parts[1]

	switch nType {
	case "Category":
		return r.Repo.GetCategoryById(ctx, id)
	default:
		return nil, errors.New("invalid ID")
	}
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

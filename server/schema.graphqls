interface Node {
  id: ID!
}

type Task implements Node {
  id: ID!
  title: String!
  description: String!
  category: Category!
  status: Status!
}

enum Status {
  New
  WORKING
  DONE
}

type Category implements Node {
  id: ID!
  name: String!
}

type Query {
  tasks: [Task!]!
  categories: [Category!]!
  node(id: ID!): Node
}

#####################################
## Mutation
#####################################
type Mutation {
  createTask(input: CreateTaskInput!): CreateTaskPayload!
  addCategory(input: AddCategoryInput!): AddCategoryPayload!
  updateCategory(id: ID!, input: UpdateCategoryInput!): UpdateCategoryPayload!
  deleteCategory(id: ID!): DeleteCategoryPayload!
}

# Task関連
input CreateTaskInput {
  title: String!
  description: String!
  categoryId: String!
}

type CreateTaskPayload {
  task: Task!
}

# Category関連
input AddCategoryInput {
  name: String!
}
input UpdateCategoryInput {
  name: String!
}

type AddCategoryPayload {
  category: Category
  errors: [Error!]
}
type UpdateCategoryPayload {
  category: Category
  errors: [Error!]
}
type DeleteCategoryPayload {
  id: ID!
  errors: [Error!]
}

type CategoryNotFoundError implements Error {
  message: String!
}

interface Error {
  message: String!
}
